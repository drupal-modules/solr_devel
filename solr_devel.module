<?php

/**
 * @file
 * Provides development tools for sites using Solr.
 */

/**
 * Captures the directory containing this file.
 */
define('SOLR_DEVEL_DIRECTORY', dirname(__FILE__));

/**
 * Implements hook_permission().
 */
function devel_node_access_permission() {
  return array(
    'view solr_devel information' => array(
      'description' => t('View the devel information for Solr searches. Raw data is returned by Solr meaning that sensitive data could be exposed that would normally be protected by various access control systems.'),
      'title' => t('Access Solr Devel Information'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_init().
 */
function solr_devel_init() {
  solr_devel_register_autoloader();
}

/**
 * Implements hook_menu().
 */
function solr_devel_menu() {
  $items = array();

  $items['node/%node/devel/apachesolr'] = array(
    'title' => 'Solr Index',
    'page callback' => 'solr_devel_node_page',
    'page arguments' => array(1),
    'access arguments' => array('view solr_devel information'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'solr_devel.pages.inc',
  );

  return $items;
}

/**
 * Very basic class autoloader for our library.
 *
 * @param string $class
 *   The name of the class being autoloaded.
 */
function solr_devel_load_class($class) {
  if (0 === strpos($class, 'Drupal_SolrDevel_')) {
    if (!class_exists($class, FALSE) && !interface_exists($class, FALSE)) {
      $basename = str_replace('_', DIRECTORY_SEPARATOR, $class) . '.php';
      $file = join(DIRECTORY_SEPARATOR, array(SOLR_DEVEL_DIRECTORY, 'lib', $basename));
      include_once $file;
    }
  }
}

/**
 * Registers our autoload implementation.
 *
 * @see solr_devel_load_class()
 */
function solr_devel_register_autoloader() {
  static $registered = FALSE;
  if (!$registered) {
    spl_autoload_register('solr_devel_load_class');
    $registered = TRUE;
  }
}

/**
 * Implements hook_solr_devel_environment_info().
 */
function apachesolr_solr_devel_environment_info() {
  $info = array();
  foreach (apachesolr_load_all_environments() as $env_id => $environment) {
    $info['apachesolr:' . $env_id] = array(
      'label' => 'Apache Solr: ' . $environment['name'],
      'adapter' => 'Drupal_SolrDevel_Adapter_ApacheSolr',
      'adapter options' => array('env_id' => $env_id),
    );
  }
  return $info;
}

/**
 * Gets environment info.
 *
 * @return array
 *   An array of environment info.
 */
function solr_devel_get_environment_info() {
  $environments = array();
  foreach (module_invoke_all('solr_devel_environment_info') as $name => $info) {
    $environments[$name] = $info + array(
      'name' => $name,
      'label' => $name,
      'adapter options' => array(),
    );
  }
  return $environments;
}

/**
 * Loads an adapter from an environment definition.
 *
 * @return Drupal_SolrDevel_Adapter
 *   The adapter instance.
 */
function solr_devel_adapter_load(array $environment) {
  return new $environment['adapter']($environment['label'], $environment['adapter options']);
}
